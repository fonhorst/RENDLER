from ResourceManager import Estimator


class TransferCalcExperimentEstimator(Estimator):
    """
    Transfer time between 2 nodes in one blade = transfer_nodes, otherwise = transfer_blades
    """
    def __init__(self, ideal_flops, reliability=1.0, transfer_nodes=1, transfer_blades=100):
        """
        transfer_matrix deleted
        """
        self.cache = dict()
        self.ideal_flops = ideal_flops
        self.reliability = reliability
        self.transfer_nodes = transfer_nodes
        self.transfer_blades = transfer_blades

    # #get estimated time of running the task on the node
    def estimate_runtime(self, task, node):
        result = (task.runtime * self.ideal_flops) / node.flops
        return result

    ## estimate transfer time between node1 and node2 for data generated by the task
    def estimate_transfer_time(self, node1, node2, task1, task2):
        # TODO transfer time should depends on a task data size
        # TODO should be refactored, because now comparing of resources making by names of resources!!!

        if node1 == node2:
            #res = self.transfer_nodes
            res = 0
        else:

            transfer_time = 0

            ##TODO: only for debug
            # for filename, file in task2.input_files.items():
            #     if filename in task1.output_files:
            #         transfer_time += (file.size / self.transfer_nodes)

            res = transfer_time
            #res = self.transfer_blades
        """
        print("Node1 => " + node1.resource.name)
        print("Node2 => " + node2.resource.name)
        print("res = " + str(res))
        """
        return res

    def get_or_estimate(self, task1, task2):
        if self.cache.get(task1, None) is not None:
            if self.cache[task1].get(task2, None) is not None:
                return self.cache[task1][task2]
            else:
                self.cache[task1][task2] = None
        else:
            self.cache[task1] = {task2: None}

        def get_transfer_time(name):
            file = task1.output_files.get(name, None)
            return 0 if file is None else file.size

        lst = [get_transfer_time(name) for (name, file) in task2.input_files.items()]
        result = sum(lst)
        self.cache[task1][task2] = result
        return result

    ## estimate probability of successful ending of the task on the node
    def estimate_reliability(self, task, node):
        return self.reliability
